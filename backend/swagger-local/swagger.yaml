openapi: 3.0.3
info:
  title: User Authentication API
  version: 1.0.0
  description: API for user registration and login
servers:
  - url: http://localhost:8000
    description: Local server

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Validation error or email already registered
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationErrorsResponse'
                  - $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful with access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '400':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: "strongPassword123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: "strongPassword123"

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: User registered successfully

    ValidationErrorsResponse:
      type: object
      properties:
        validation_errors:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
          example:
            - email: "value is not a valid email address"
            - password: "field required"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Email already registered

    LoginSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Login successful!
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

